// //–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
// //–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a, b
// //–ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î —á–∏—Å–ª–∞
// function min(a, b) {
//     if (typeof a !== "number" || typeof b !== "number") {
//         alert("invalid")
//         return
//     }
//     return Math.min(a, b);
//     // return a < b ? a : b;
// }

// // console.log(typeof typeof true);

// const result = min(2, 5);
// console.log(result);

//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findSmallerNumber(numbers)
//—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à–µ –≤ –º–∞—Å–∏–≤—ñ
//–î–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤
/* const numbers = [100, 2, 5, 35, 56, 12, 24, 7, 80, 3]; */

/* function findSmallerNumber(numbers) {
    if (!Array.isArray(numbers)) {
        console.log('Error');
        return 0;
    }

    let num = numbers[0];

    for (let i = 1; i < numbers.length; i += 1) {
        if (numbers[i] < num) {
            num = numbers[i];
        }
    }

    return num;
}

const min = findSmallerNumber("numbers");

console.log(min); */

//–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é caculculateAverage()
//—è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
//–ê—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è.
//–î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ü–µ —á–∏—Å–ª–∞.

// function caculculateAverage() {
//     console.log(arguments);
//     let avarege = 0;
//     let count =0;

//     for (let argument of arguments) {
//         if (typeof argument !== "number") {
//             continue
//         }
//         avarege += argument
//         count += 1
//     }
//     console.log((avarege/count).toFixed(1));
// }
// caculculateAverage(2, 5, 7, 'f', 't')

// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ styles –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´–î–∂–∞–∑¬ª —Ç–∞ ¬´–ë–ª—é–∑¬ª.
//–î–æ–¥–∞–π—Ç–µ "–†–æ–∫-–Ω-—Ä–æ–ª" –≤ –∫—ñ–Ω–µ—Ü—å.
// –ó–∞–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è "–ë–ª—é–∑" –Ω–∞ "–ö–ª–∞—Å–∏–∫–∞".
//–í–∏–¥–∞–ª–∏—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —ñ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
//–í—Å—Ç–∞–≤—Ç–µ ¬´–†–µ–ø¬ª —ñ ¬´–†–µ–≥–≥—ñ¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
// const styles = ["–î–∂–∞–∑", "–ë–ª—é–∑"];
// styles.push("–†–æ–∫-–Ω-—Ä–æ–ª");
// console.log(styles);
// // console.log(styles.push("–†–æ–∫-–Ω-—Ä–æ–ª"));
// console.log(styles.splice(1, 1, "–ö–ª–∞—Å–∏–∫–∞"));
// console.log(styles);

// // console.log(styles.splice(0, 1)[0]);

// styles.unshift("–†–µ–ø", "–†–µ–≥–≥—ñ");
// console.log(styles);

//–ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±'—î–∫—Ç–∞ user,
//–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ:
//1 –¥–æ–¥–∞—Å—Ç—å –ø–æ–ª–µ mood –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º 'happy'
//2 –∑–∞–º—ñ–Ω–∏—Ç—å hobby –Ω–∞ 'skydiving'
//3 –∑–∞–º—ñ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è premium –Ω–∞ false
//4 –≤–∏–≤–æ–¥–∏—Ç—å –≤–º—ñ—Å—Ç –æ–±'—î–∫—Ç–∞ users —É —Ñ–æ—Ä–º–∞—Ç—ñ
//–∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Object.keys() —ñ for...of
// const user = {
//    name: "John",
//    age: 20,
//    hobby: "tenis",
//    premium: true,
// };

// user.mood = 'happy';

// // user['mood']='happy';

// // const userMood = {} ;
// // user[userMood] = 'happy';

// // user.hobby = 'skydiving';

// // user['hobby'] =  'skydiving';

// const urerHobby = 'hobby';

// user[urerHobby] = 'skydiving';

// const userKeys = Object.keys(user);

// for (const key of userKeys) {
//     console.log(`${key}:${user[key]}`);
// }

// // console.log(user);

// // –ó–∞–¥–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

// const numbers = [1, 2, 3, 4, 5, 6, 7, 8]

// // console.log(numbers.reverse());

// for (let i = 0; i < numbers.length/2; i += 1) {
//     let template = numbers[i];
//     numbers[i] = numbers[numbers.length - 1 - i];
//     numbers[numbers.length - 1 - i] = template;

// }

// console.log(numbers);

// const people = [
//   {
//     name: 'Alex',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: [],
//   },
//   {
//     name: 'Eva',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Eva'],
//   },
// ];
//–Ω–∞—Ä—Ü–∏—Å  'Jhon'

// const people1 = [
//   {
//     name: 'Alex',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: [],
//   },
//   {
//     name: 'Eva',
//     know: [],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Eva'],
//   },
// ];
//–Ω–µ–º–∞—î –Ω–∞—Ä—Ü–∏—Å–∞'

// const people3 = [
//   {
//     name: 'Alex',
//     know: ['Alex', 'Eva'],
//   },
//   {
//     name: 'Jhon',
//     know: [],
//   },
//   {
//     name: 'Eva',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Eva'],
//   },
// ];
//–Ω–µ–º–∞—î –Ω–∞—Ä—Ü–∏—Å–∞

// const people4 = [
//   {
//     name: 'Alex',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Jhon',
//     know: ['Eva'],
//   },
//   {
//     name: 'Eva',
//     know: ['Alex', 'Jhon'],
//   },
//   {
//     name: 'Ivan',
//     know: ['Jhon', 'Eva'],
//   },
// ];
//–Ω–µ–º–∞—î –Ω–∞—Ä—Ü–∏—Å–∞'
// –ù–∞—Ä—Ü–∏—Å–∞ –∑–Ω–∞—é—Ç—å –≤—Å—ñ, –Ω–∞—Ä—Ü–∏—Å –Ω–µ–∑–Ω–∞—î –Ω—ñ–∫–æ–≥–æ

// const findNarcissus = (arr) => {
//     let narcissus = "";
//     for (let obj of arr) {
//         if(obj.know.length === 0) {
//             narcissus = obj.name
//         }
//     }
//     if (!narcissus) return '–Ω–µ–º–∞—î –Ω–∞—Ä—Ü–∏—Å–∞'
//     for (let obj of arr) {
//         if(obj.name === narcissus) {
//             continue
//         }
//         if(!obj.know.includes(narcissus)) {
//             return "–Ω–µ–º–∞—î –Ω–∞—Ä—Ü–∏—Å–∞"
//         }
//     }
//     return narcissus
// }

// console.log(findNarcissus(people4));

//–ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é updateObject, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
//–Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –±–µ–∑ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ({a: 1, b: 2}, 'b') => {a: 1}

// const superObj = { a: 1, b: 2, c: 4, d: 11 };
// const updateObject = function (obj, removeKey) {
//   const newObj = { ...obj };
//   delete newObj[removeKey];
//   return newObj
// }

// console.log(updateObject(superObj, 'b'));;
// console.log(superObj);
// const updateObject = function (obj, removeKey) {
//   const keys = Object.keys(obj);
//   const newObj = {}
//   for (let key of keys) {
//     if (key === removeKey) {
//       continue;
//     }
//     newObj[key] = obj[key];
//   }
//   console.log(newObj);
//   return newObj
// }

// updateObject({ a: 1, b: 2, c: 4, d: 11}, 'b');

// –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç calculator —ñ–∑ —Ç—Ä—å–æ–º–∞ –º–µ—Ç–æ–¥–∞–º–∏
//read(a, b) - –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î —ó—Ö
//—è–∫ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –æ–±'—î–∫—Ç–∞
//sum() –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
//mult() –ø–µ—Ä–µ–º–Ω–æ–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
// const calculator = {
//   read(a, b) {
//     this.a = a;
//     this.b = b;
//   },
//   sum() {
//     if (!this.a && !this.b) {
//       return 0;
//     }
//     return this.a + this.b;
//   },

//   mult() {
//     if (!this.a && !this.b) {
//       return 0;
//     }
//     return this.a * this.b;
//   },
// };
// calculator.read(2, 5);
// console.log(calculator);
// console.log(calculator.sum());
// console.log(calculator.mult());

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±'—î–∫—Ç
//—ñ —Ñ–æ—Ä–º—É—î –æ–±'—î–∫—Ç–∏ —É –Ω–æ–≤–æ–º—É –º–∞—Å–∏–≤—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ [key, value]
// const user6 = {
//   name: "John",
//   surName: "Stones",
//   age: 20,
//   hobby: "tenis",
//   haveCar: true,
//   merried: false,
// };

// function creatObj(obj) {
//   // console.log(Object.entries(obj));
//   const arr = [];
//   for (const key in obj) {
//     arr.push({ [key]: obj[key] });
//   }
//   console.log(arr);
// }
// creatObj(user6);
/*
 * –ü—Ä–∞—Ü—é –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—à–∏–∫—É:
 * - getItems()
 * - add(product)
 * - remove(productName)
 * - clear()
 * - countTotalPrice()
 * - increaseQuantity(productName)
 * - decreaseQuantity(productName)
 *
 * { name: 'üçé', price: 50 }
 * { name: 'üçá', price: 70 }
 * { name: 'üçã', price: 60 }
 * { name: 'üçì', price: 110 }
 */

// const cart = {
//     items: [],
//     getItems() {
//         return this.items
//     },

//     add(product) {
//         for (let item of this.items) {
//             if (item.name === product.name) {
//                 item.quantity += 1;
//                 return
//             }
//         }
//         this.items.push({ ...product, quantity : 1 })

//     },

//     remove(productName) {
//         for (let i = 0; i < this.items.length; i += 1) {
//             if (this.items[i].name === productName) {
//                 this.items.splice(i, 1)
//                 return
//             }
//         }
//     },

//     clear() {
//         this.items = [];
//     },

//     countTotalPrice() {
//         let totalPrice = 0;

//         for (let item of this.items) {
//             totalPrice += item.price*item.quantity
//         }
//         return totalPrice;
//     },

//     increaseQuantity(productName) {
//         for (let i = 0; i < this.items.length; i += 1) {
//             if (this.items[i].name === productName) {
//                 this.items[i].quantity += 1;
//                 return
//             }
//         }
//     },

//     decreaseQuantity(productName) {
//         for (let i = 0; i < this.items.length; i += 1) {
//             if (this.items[i].name === productName) {
//                 this.items[i].quantity -= 1;
//                 if (this.items[i].quantity === 0) {
//                     this.items.splice(i, 1)
//                     return
//                 }
//             }
//         }
//     }
// }

// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçá', price: 70 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçì', price: 110 });
// cart.add({ name: 'üçì', price: 110 });

// cart.remove('üçã');
// cart.increaseQuantity('üçé');
// cart.decreaseQuantity('üçá');
// cart.decreaseQuantity('üçé');
// console.table(cart.getItems());
// console.log(cart.countTotalPrice());

/* const vehicles = [
  { make: 'Honda', model: 'CR-V', type: 'suv', amount: 14, price: 24045, onSale: true },
  { make: 'Honda', model: 'Accord', type: 'sedan', amount: 2, price: 22455, onSale: true },
  { make: 'Mazda', model: 'Mazda 6', type: 'sedan', amount: 8, price: 24195, onSale: false },
  { make: 'Mazda', model: 'CX-9', type: 'suv', amount: 7, price: 31520, onSale: true },
  { make: 'Toyota', model: '4Runner', type: 'suv', amount: 19, price: 34210, onSale: false },
  { make: 'Toyota', model: 'Sequoia', type: 'suv', amount: 16, price: 45560, onSale: false },
  { make: 'Toyota', model: 'Tacoma', type: 'truck', amount: 4, price: 24320, onSale: true },
  { make: 'Ford', model: 'F-150', type: 'truck', amount: 11, price: 27110, onSale: true },
  { make: 'Ford', model: 'Fusion', type: 'sedan', amount: 13, price: 22120, onSale: true },
  { make: 'Ford', model: 'Explorer', type: 'suv', amount: 6, price: 31660, onSale: false },
];

const smth = ({ model, amount }) => {
    console.log(model, amount);
}

vehicles.forEach(smth); */

//–î–∞–Ω–∏–π –º–∞—Å–∏–≤ —ñ–∑ —á–∏—Å–ª–∞–º–∏. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —ñ–∑ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ —Ü–∏—Ö —á–∏—Å–µ–ª
//[5, 6, 7, 8, 9]

// function multiply (args) {const newArray = []

//     args.forEach((item)=>{
//         newArray.push(item*item)
//         });    console.log(newArray)
//         return
// }

// multiply([5, 6, 7, 8, 9])

// –î–∞–Ω–∏–π –º–∞—Å–∏–≤ —ñ–∑ —á–∏—Å–ª–∞–º–∏. –ß–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º–∏ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏. –ó–Ω–∞–π–¥—ñ—Ç—å —Å—É–º—É –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ü—å–æ–≥–æ –º–∞—Å–∏–≤—É. [1, 2 , -5, -7 , -9, 2 , 5 , 4, -69, 85,-5]

// const numbers = [1, 2, -5, -7, -9, 2, 5, 4, -69, 85, -5];
// let sum = 0;
// const sum = function (arr) {
//     let total = 0;
//     arr.forEach((el) => {
//         if (el > 0) {
//             total += el;
//         }

//     })
//     console.log(total);
// }

// sum(numbers);

// function sumOfAll (array, positive, negative)  {
//     let sumPos= 0;
//     let sumNeg = 0;
// for (let i = 0; i < array.length; i++){
// if (array[i] > 0){
//    sumPos+= positive(array[i]);
// }else{
// sumNeg += negative(array[i]);
// }

// }
// console.log([sumPos, sumNeg])
// }

// const checkPositive = (item) => item;

// const checkNegative = (item)=> item;

// sumOfAll(numbers, checkPositive, checkNegative)

// –î–∞–Ω–∏–π –º–∞—Å–∏–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ 1, 2, 5, 9, 4, 13, 4, 10. –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É foreach —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ if –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —î –≤ –º–∞—Å–∏–≤—ñ –µ–ª–µ–º–µ–Ω—Ç –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º, —Ä—ñ–≤–Ω–∏–º 4.
// –Ø–∫—â–æ —î - –≤–∏–≤–µ–¥—ñ—Ç—å –Ω–∞ –µ–∫—Ä–∞–Ω '–Ñ!' —ñ –≤–∏–π–¥—ñ—Ç—å —ñ–∑ —Ü–∏–∫–ª—É.–Ø–∫—â–æ –Ω—ñ ‚Äì –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞.

// const numbers = [4, 1, 2, 5, 9,  13, 4, 10];

// numbers.forEach((item) => {
//     if (item === 4) {
//         console.log("–Ñ!");
//         return;
//     }
//     console.log(item);
// });

// –î–∞–Ω–∏–π –º–∞—Å–∏–≤ —á–∏—Å–ª–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: [10, 20, 30, 50, 235, 3000, 600, 758].
// –í–∏–≤–µ–¥—ñ—Ç—å –Ω–∞ –µ–∫—Ä–∞–Ω –ª–∏—à–µ —Ç—ñ —á–∏—Å–ª–∞ –∑ –º–∞—Å–∏–≤—É, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ —Ü–∏—Ñ—Ä—É 1, 2 —á–∏ 5.

// const numbers = [10, 20, 30, 50, 235, 3000, 600, 758];

// numbers.forEach((item) => {
//     const numberToString = String(item);
//     if (numberToString.startsWith('1') || numberToString.startsWith('2') || numberToString.startsWith('5')) {
//     console.log(numberToString);
//     }

// });

// numbers.forEach((item) => {
//     const numberToString = String(item);
//     if (numberToString[0] === '1' || numberToString[0] === '2' || numberToString[0] === '5') {
//     console.log(item);
//     }
//  });

//–†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —è–∫—ñ—Å—Ç—é amount —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏
// –¢—ñ–ª—å–∫–∏ –Ω–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ

// const modelName = vehicles
//   .filter(({ amount }) => amount > 12)
//   .map(({ model }) => model);

// console.table(modelName);

// const numbers = [1, 9, 0, 1, 5, 9, 1, 6];

// const filteredNumbers = numbers.filter((number, index, arr) => arr.indexOf(number) === index)
// const newFilteredNumbers = numbers.reduce((acc, number) => {
//   if (!acc.includes(number)) { acc.push(number) } return acc;
// }, [])
//   const newFilteredNumbers = numbers.reduce((acc, number) => !acc.includes(number) ? [...acc, number] : acc, [])
// console.log(filteredNumbers);
// console.log(newFilteredNumbers);

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ —ñ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º —Ü—ñ–Ω–∏
/* const vehicles = [
  {
    make: "Honda",
    model: "CR-V",
    type: "suv",
    amount: 14,
    price: 24045,
    onSale: true,
  },
  {
    make: "Honda",
    model: "Accord",
    type: "sedan",
    amount: 2,
    price: 22455,
    onSale: true,
  },
  {
    make: "Mazda",
    model: "Mazda 6",
    type: "sedan",
    amount: 8,
    price: 24195,
    onSale: false,
  },
  {
    make: "Mazda",
    model: "CX-9",
    type: "suv",
    amount: 7,
    price: 31520,
    onSale: true,
  },
  {
    make: "Toyota",
    model: "4Runner",
    type: "suv",
    amount: 19,
    price: 34210,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Sequoia",
    type: "suv",
    amount: 16,
    price: 45560,
    onSale: false,
  },
  {
    make: "Toyota",
    model: "Tacoma",
    type: "truck",
    amount: 4,
    price: 24320,
    onSale: true,
  },
  {
    make: "Ford",
    model: "F-150",
    type: "truck",
    amount: 11,
    price: 27110,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Fusion",
    type: "sedan",
    amount: 13,
    price: 22120,
    onSale: true,
  },
  {
    make: "Ford",
    model: "Explorer",
    type: "suv",
    amount: 6,
    price: 31660,
    onSale: false,
  },
];

const carOnSale = vehicles.filter(({ onSale }) => onSale).sort(({ price: a}, {price: b}) => a - b);

console.table(carOnSale); */

//–ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–Ω–∏–∂–∫—É 20% –Ω–∞ —Ñ—Ä—É–∫—Ç–∏ –≤ –º–∞—Å–∏–≤—ñ,
//–ü—Ä–∏—Å–≤–æ—ó—Ç–∏ ID –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É
// const fruits = [
//   { name: 'apple', price: 200 },
//   { name: 'orange', price: 300 },
//   { name: 'grapes', price: 750 },
// ];

/* const newPrices = fruits.reduce((acc, fruit)=>{acc.push({...fruit, price: fruit.price*0.8, id:Date.now()}); return acc},[])
console.log(newPrices) */

/* const newPrices = fruits.reduce((acc, fruit)=> [...acc, {...fruit, price: fruit.price*0.8, id:Date.now()}], [])
console.log(newPrices) */

// const newPrices = fruits.map(fruit=> ({...fruit, price: fruit.price*0.8, id:Date.now()}))
// console.log(newPrices)

// –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏, —â–æ–± –∫–æ–¥ –ø—Ä–∞—Ü—é–≤–∞–≤
// const product = {
// price: 5000,
// showPrice() {
// console.log(this.price);
// },
// };
// product.showPrice();

// const product = {
//   price: 5000,
//   showPrice() {
//     console.log(this.price);
//   },
// };

// function callAction(action) {
//   action();
// }

// callAction(product.showPrice.bind(product));

// –Ø–∫–∏–º –±—É–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –æ–±'—î–∫—Ç–∞ ref? –ß–æ–º—É?

// function makeUser() {
//   console.log(this);
//   return {
//     name: "John",
//     ref () {
//       return this
//     }
//   };
// }

// let user = makeUser();

// console.log( user().ref.name )
// console.log(user.ref().name);

//–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ "same" –º–∞—Å–∏–≤–∏
// —á–∏—Å–ª–∞ –∑ –ø–µ—Ä—à–æ–≥–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç—ñ –¥–æ—Ä—ñ–≤–Ω—é—é—Ç—å —á–∏—Å–ª–∞–º –¥—Ä—É–≥–æ–≥–æ

// const a = [121, 144, 19, 161, 19, 144, 19, 11];
// const b = [121, 14641, 20736, 361, 25921, 361, 20736, 361];

// const fnA = (a, b) => {
//   const var1 = [...a].sort((a, b) => a - b);
//   const var2 = [...b].sort((a, b) => a - b);

//   for (let i = 0; i < var1.length; i += 1) {
//     if (var1[i] * var1[i] !== var2[i]) {
//       return false;
//     }
//   }
//   return true;
//   return var1.map((el) => el * el).every((el, index) => el === var2[index]);
// };

// console.log(fnA(a, b));

// –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª —É —Ä—è–¥–∫—É
//–£ —Ä—è–¥–∫—É –±—É–¥—É—Ç—å –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ –ª–∞—Ç–∏–Ω—Å—å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É —ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å —É lowerCase

let input1 = "leetcode"; //0
let input2 = "loveleetcode"; //2
let input3 = "aabb"; //-1

// function makeMeCoffee (string) {
//   const array = string.split("");
//   console.log(array);
//   const newArray = array.reduce((acc, item) => {
//     console.log(acc);
//     return { ...acc, [item]: acc[item] ? acc[item] + 1 : 1 }
//   }, {})
//   console.log(newArray);
// }

// makeMeCoffee(input1);

// function makeMeCoffee (string) {
//   const array = string.split("");
//   // console.log(array);
//   const newArray = array.reduce((acc, item) => {
//     // console.log(acc);
//     if (acc[item]) {
//       acc[item] = acc[item] += 1;
//     } else {
//       acc[item] = 1;
//     }
//     return acc;
//   }, {})
//   // console.log(newArray);
//   for (const key in newArray) {
//     if (newArray[key] === 1) {
//       return array.indexOf(key);
//     }
//   }
//   return -1;
// }

// const fnA = (input) => {
//   return [...input].indexOf([...input].find((el, i, array) => array.indexOf(el) === array.lastIndexOf(el)));
// };

// const fnA = (input) => {
//   return [...input].indexOf([...input].find((el, i, array) => array.indexOf(el) === array.lastIndexOf(el)));
// };

// const unique = (str) => {
//   const arr = str.split("");
//   const un = arr.find((el) => arr.indexOf(el) === arr.lastIndexOf(el));
//   if (!un) return -1;
//   return arr.indexOf(un)
// };

// console.log(makeMeCoffee(input1));
// console.log(makeMeCoffee(input2));
// console.log(makeMeCoffee(input3));
// console.log(fnA(input1));
// console.log(fnA(input2));
// console.log(fnA(input3));

// –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç–∏–º–µ –Ω–∞–º —É—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤

// const sport = {
//   tournament: 'The Master',
//   players: [
//     {
//       name: 'Wood',
//       age: 37
//     },
//     {
//       name: 'Mike',
//       age: 43
//     }
//   ],
//   getPlayers() {
//     console.log(this);
//     const arrow = () => { console.log(this); }
//     arrow()
//   },
// };

// sport.getPlayers();

//2. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏
//–î–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤.
//–ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞–≥—Ä—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤,
//—ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —ó—Ö —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.
//–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:
//getItems() - –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤
//addItems(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö
//removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö

/* function Storange(arg) {
  this.items = arg;
  
} 

Storange.prototype.getItems = function () {
  return this.items;
};
  
Storange.prototype.addItems = function (item) {
  this.items.push(item);
};

Storange.prototype.removeItem = function (item) {
  const index = this.items.indexOf(item);

  if (index === -1) {
    return console.log('nohhing');
  } 

  this.items.splice(index, 1);
};

const arr1 = [1, 2, 3];

const store = new Storange(arr1);


store.removeItem(21);
store.addItems(10);
console.log(store.getItems());
 */

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Client —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç
//–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login email
//–û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login #email,
//–¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä —Ç–∞ —Å–µ—Ç—Ç–µ—Ä login email

// class Client {

//   #email
//   #login
//   constructor ({login, email}) {
//     this.#login = login;
//     this.#email = email
//   }

//   get login () {
//     return this.#login
//   }

//   set login (newLogin) {
//     this.#login = newLogin
//   }

//   get email () {
//     return this.#email
//   }

//   set email (newEmail) {
//     this.#email = newEmail
//   }
// }

// const petya = new Client ({login: "Petya", email: "jjj@gmail.com"})
// console.log(petya);

// petya.login="vasya"
// console.log(petya.login);

// class ClientType extends Client {

//   constructor ({login, email,password}) {
//     super({login, email})
//     this.password = password;
//   }

//   get passwordClient () {
//     return this.password
//   }

//   set passwordClient (newPassword) {
//     this.password = newPassword
//   }
// }
// const tolya = new ClientType ({login: "tolya", email: "jjj@gmail.com", password:"hfneuf" })
// console.log(tolya);

// tolya.passwordClient = "h,dlpljfg"
// console.log(tolya.passwordClient)

// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π —É–ø—Ä–∞–≤–ª—è—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É
//–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items.
//–ù–æ—Ç–∞—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text priority
//–î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority,
//—É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
//–î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text)
//updatePriority(text, newPriority)

// class Notes {
//   static Priority = {
//     HIGHT: "hight",
//     LOW: "low",
//   }
//   constructor() {
//     this.items = [];
//   }

//   addNote(note) {
//     this.items.push(note)
//   }
//   removeNote(text) {
//     this.items = this.items.filter(el => el.text !== text)
//   }
//     updateText(text, newText) {
//       this.items = this.items.map((el) => {
//         if (el.text === text) {
//           el.text = newText
//         }
//       return el
//     })
//   }
// updateText(text, newText) {
//   const note = this.items.find(el => el.text === text)
//   console.log(note === this.items[0]);
//   note.text = newText
//   console.log(note);
// }
//   updateText(text, newText) {
//   const index = this.items.findIndex(el => el.text === text)
//   this.items[index].text = newText;
// }
// }

// const obj1 = new Notes()
// obj1.addNote({ text: 'Hello world', priority: Notes.Priority.HIGHT })
// obj1.addNote({ text: 'Hello Tolik', priority: Notes.Priority.HIGHT })
// obj1.addNote({ text: 'Hello Mango', priority: Notes.Priority.LOW })
// obj1.updateText('Hello world', 'Hello Poli')
// obj1.removeNote('Hello Poli')
// console.log(obj1);

// –∫–æ–¥ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ —Ä—è–¥–∫–∏ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î
// –Ω–∞–π–¥–æ–≤—à–∏–π —Ä—è–¥–æ–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∏–π —ñ –¥–æ–ø–æ–≤–Ω–µ–Ω–∏–π
// –∑ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–º —Ä—è–¥–∫–æ–º –Ω–∞ –ø–æ—á—Ç–∫—É —ñ –Ω–∞ –∫—ñ–Ω—Ü—ñ —Ä–æ–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Ä—è–¥–∫–∞
// —è–∫—â–æ —Ä—è–¥–∫–∏ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –¥–æ–≤–∂–∏–Ω—É, –ø–µ—Ä—à–∏–π
// –≤–≤–∞–∂–∞—î—Ç—å—Å—è –Ω–∞–π–¥–æ–≤—à–∏–º

// 1 - —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// 2-

// function shorter_reverse_longer(a, b) {
//   // let short = '';
//   // let long = '';

//   // if (a.length >= b.length) {
//   //   long = a;
//   //   short = b;
//   // } else {
//   //   long = b;
//   //   short = a;
//   // }

//   // const result = short + long.split('').reverse().join('') + short;

//   // return result;

//   return a.length >= b.length ? b + a.split('').reverse().join('') + b : a + b.split('').reverse().join('') + a;
// }

// console.log(shorter_reverse_longer('first', 'abcde'));// 'abcdetsrifabcde';
// console.log(shorter_reverse_longer('hello', 'bau'));// 'bauollehbau';
// console.log(shorter_reverse_longer('fghi', 'abcde'));// 'fghiedcbafghi';

// –ú–∞—é—á–∏ —Å–ø–∏—Å–æ–∫ —ñ —á–∏—Å–ª–æ, —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç–∏–º–µ –∫–æ–∂–µ–Ω –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫—É —â–æ–Ω–∞–π–±—ñ–ª—å—à–µ N —Ä–∞–∑—ñ–≤ –±–µ–∑ –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤—Ö—ñ–¥–Ω–µ —á–∏—Å–ª–æ –¥–æ—Ä—ñ–≤–Ω—é—î 2, –∞ —Å–ø–∏—Å–æ–∫ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö ‚Äî [1,2,3,1,2,1,2,3], –≤–∏ –±–µ—Ä–µ—Ç–µ [1,2,3,1,2], –≤—ñ–¥–∫–∏–¥–∞—î—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π [ 1,2], –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —Ç–æ–≥–æ, —â–æ 1 —ñ 2 –±—É–¥—É—Ç—å —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ 3 —Ä–∞–∑–∏, –∞ –ø–æ—Ç—ñ–º –≤—ñ–∑—å–º–µ 3, —â–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ [1,2,3,1,2,3].
// –ó—ñ —Å–ø–∏—Å–∫–æ–º [20,37,20,21] —ñ –Ω–æ–º–µ—Ä–æ–º 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—É–¥–µ [20,37,21]
// deleteNth([20, 37, 20, 21], 1) // [20, 37, 21];

// function deleteNth(arr, n) {
//   const result = [];
//   const obj = {};
//   for (const number of arr) {
//     if (obj[number]) {
//       obj[number] = obj[number] + 1;
//     } else {
//       obj[number] = 1;
//     }
//     if (obj[number] <= n) {
//       result.push(number);
//     }
//   }
//   console.log(result);
// }

// function deleteNth(arr, n) {
//   const obj = {};
//   const result = arr.filter((el) => {
// obj[el] = (obj[el] || 0) + 1;
// return obj[el] <= n;
// console.log(obj);
// console.log((obj[el] = obj[el] + 1 || 1));
//   return (obj[el] = obj[el] + 1 || 1) <= n;
// });
// console.log(result);
// }

// deleteNth([1, 1, 3, 3, 7, 2, 2, 2, 2], 3); // [1, 1, 3, 3, 7, 2, 2, 2];
// deleteNth([20, 21, 20, 37], 1);
// const user = {};
// const userName = "name";
// user[userName] = "Mango";
// console.log(user[userName]);

// const deleteNth = (array, N) => {
//   const result = [];
//   for (const num of array) {
//     if (result.filter((el) => el === num).length < N) {
//       result.push(num);
//     }
//   }

//   return result;
// };
// console.log(
//   deleteNth(
//     [
//       1,
//       1,
//       3,

//     ],
//     2
//   )
// );

// –î–∑—ñ–¥–∑—å–æ —Ç–∞ –°–∞—Ä–∞ –¥—É–º–∞—é—Ç—å, —â–æ –≤–æ–Ω–∏ –∑–∞–∫–æ—Ö–∞–Ω—ñ, –∞–ª–µ –ø—Ä–æ —Ç–µ, –¥–µ –≤–æ–Ω–∏ –∂–∏–≤—É—Ç—å, –≤–æ–Ω–∏ –¥—ñ–∑–Ω–∞—é—Ç—å—Å—è –ø—Ä–æ —Ü–µ –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –∑—ñ—Ä–≤—É—Ç—å –ø–æ –∫–≤—ñ—Ç—Ü—ñ. –Ø–∫—â–æ –Ω–∞ –æ–¥–Ω—ñ–π –∫–≤—ñ—Ç—Ü—ñ –ø–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ–ª—é—Å—Ç–æ–∫, –∞ –Ω–∞ —ñ–Ω—à—ñ–π –Ω–µ–ø–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ–ª—é—Å—Ç–æ–∫, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–æ–Ω–∏ –∑–∞–∫–æ—Ö–∞–Ω—ñ.

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –±—Ä–∞—Ç–∏–º–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ–ª—é—Å—Ç–æ–∫ –∫–æ–∂–Ω–æ—ó –∫–≤—ñ—Ç–∫–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è true, —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–∫–æ—Ö–∞–Ω—ñ, —ñ –∑–Ω–∞—á–µ–Ω–Ω—è false, —è–∫—â–æ –Ω—ñ.

// function lovefunc(flower1, flower2) {
//   // if ((flower1 % 2 === 0 && flower2 % 2 !== 0) || (flower2 % 2 === 0 && flower1 % 2 !== 0)) {
//   //   return 'YOU ARE BELOVED';
//   // }
//   // return 'SORRY, TRY AGAIN';
//   // return flower1 % 2 !== flower2 % 2;
//   return (flower1 + flower2) % 2 === 1;
// }
// console.log(lovefunc(1, 4));
// console.log(lovefunc(2, 2));
// console.log(lovefunc(0, 1));
// console.log(lovefunc(0, 0));

// lovefunc(1, 4); // true;
// lovefunc(2, 2); // false;
// lovefunc(0, 1); // true;
// lovefunc(0, 0); // false;

// –ì–æ–¥–∏–Ω–Ω–∏–∫ –ø–æ–∫–∞–∑—É—î h –≥–æ–¥–∏–Ω, m —Ö–≤–∏–ª–∏–Ω —ñ s —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –ø—ñ–≤–Ω–æ—á—ñ.

// –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å –∑ –æ–ø—ñ–≤–Ω–æ—á—ñ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö.
// past(0,1,1),61000
// past(1, 1, 1), 3661000

// const past = (h, m, s) => {
//   let result = 0;
//   let secToMili = s * 1000;
//   let minToMili = m * 60 * 1000;
//   let hoursToMili = h * 60 * 60 * 1000;
//   result = secToMili + minToMili + hoursToMili;
//   return result;
// };

// past(0,1,1),61000
// past(1, 1, 1), 3661000
// console.log(past(0, 1, 1));


// –£ —Ü—ñ–π –∫–∞—Ç–∞ –π–¥–µ—Ç—å—Å—è –ø—Ä–æ –º–Ω–æ–∂–µ–Ω–Ω—è –¥–∞–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—ñ—Å—ñ–º, —è–∫—â–æ –≤–æ–Ω–æ –ø–∞—Ä–Ω–µ, —ñ –Ω–∞ –¥–µ–≤‚Äô—è—Ç—å –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.


// const simpleMultiplication = (mas) => mas.map(number => number % 2 === 0 ? number * 8 : number * 9);

// console.log(simpleMultiplication([2, 3, 7, 10]));








// EXTRA


// Teemo is not really excited about the new year's eve, but he has to celebrate it with his friends anyway.

// He has a really big passion about programming and he wants to be productive till midnight. He wants to know how many minutes he has left to work on his new project.
// He doesn't want to look on the clock all the time, so he thought about a function, which returns him the number of minutes.

// Can you write him a function, so he can stay productive?

// The function minutesToMidnight(d) will take a date object as parameter. Return the number of minutes in the following format:

// "x minute(s)"

// You will always get a date object with of today with a random timestamp.
// You have to round the number of minutes.
// Milliseconds doesn't matter!

// Some examples:

// 10.00 am => "840 minutes"

// 23.59 pm => "1 minute"

// const fullDay = new Date(new Date().setHours(0,0,0,0));

// // Test.assertEquals(minutesToMidnight(fullDay), "1440 minutes");

// console.log(fullDay);

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ä–∫–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫.
//–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ "Add" "Remove", —è–∫—ñ –∑–º—ñ–Ω—é–≤–∞—Ç–∏–º—É—Ç—å —Å–∫–ª–∞–¥ —Å–ø–∏—Å–∫—É
//–°—Ç–≤–æ—Ä–∏—Ç–∏ input –∑ —è–∫–æ–≥–æ –±—É–¥–µ–º–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ –≤ li
//* –ü–∞—Ä–Ω–∏–º li –≤–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≤–æ–Ω–∏–π —Ñ–æ–Ω, –Ω–µ–ø–∞—Ä–Ω–∏–º - —Å–∏–Ω—ñ–º
//–î–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ createElement

// const itemList = document.createElement(`ol`);
// const buttonAdd = document.createElement(`button`)
// const buttonRemove = document.createElement(`button`)
// const inputLi = document.createElement(`input`)
// buttonAdd.textContent = `Add`;
// buttonRemove.textContent = `Remove`;
// buttonRemove.disabled = true
// document.body.append(inputLi, buttonAdd, buttonRemove, itemList)

// buttonAdd.addEventListener(`click`, ()=>{const text = inputLi.value||`default`;
// const itemLi = document.createElement(`li`);
// itemLi.textContent = text;
// itemList.append(itemLi);
// buttonRemove.disabled = false;
// inputLi.value = ``
// console.log(itemList.children.length);
// const even = itemList.children.length%2 === 0
// itemLi.style.background = even ? `yellow` : `blue`
//   console.log(even);})

//   buttonRemove.addEventListener(`click`,()=>{
//     console.log(itemList.hasChildNodes());
//     itemList.lastElementChild.remove()
//     if(!itemList.hasChildNodes()) {
//       buttonRemove.disabled = true
//       return
//     }

//   })




//–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫—É –≥—Ä—É:)
// - –°–ø–æ—á–∞—Ç–∫—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è
//—è–∫–∞ - —Ç–æ —Ñ–æ—Ä–º–∞ (–∫–æ–ª–æ, –∫–≤–∞–¥—Ä–∞—Ç, –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫)
// - –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –Ω–µ—ó –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É —Ñ–æ—Ä–º–∞ –ø–æ–≤–∏–Ω–Ω–∞
//–∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à—É
// - –§–æ—Ä–º–∞ —â–æ—Ä–∞–∑—É –ø–æ–≤–∏–Ω–Ω–∞ –∑'—è–≤–ª—è—Ç–∏—Å—è —É —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
// - –ö–æ–ª—ñ—Ä —Ñ–æ—Ä–º–∏ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–º—ñ–Ω—é—î—Ç—å—Å—è,
const forms = [
  'width: 100px; height: 100px; border-width: 1px; border-color: #000000',
  'width: 100px; height: 100px; border-radius: 50%; border-width: 1px; border-color: #000000',
  'width: 150px; height: 100px; border-width: 1px; border-color: #000000',
  'width: 200px; height: 100px; border-radius: 100px / 50px;',
  'width: 150px; height: 100px; transform: skew(20deg);',
];

const formEl = document.createElement('div');
formEl.style.cssText = forms[2];
formEl.style.background = getRandomHexColor();
document.body.append(formEl);
formEl.addEventListener('click', () => {
  const index = randomither(forms.length)
  formEl.style.cssText = forms[index];
  formEl.style.background = getRandomHexColor();
  formEl.style.border = '5px solid black'
  formEl.style.position = 'absolute';
  const height = 100 - (formEl.clientHeight * 100) / document.documentElement.clientHeight;
  const width = 100 - (formEl.clientWidth * 100) / document.documentElement.clientWidth;
  formEl.style.top = randomither(height).toString() + '%';
  formEl.style.left = randomither(width).toString() + '%';
})

function getRandomHexColor() {
  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;
}

const randomither = max => {
  return Math.floor(Math.random() * max);
};
